#!/usr/bin/python
 
import time
from subprocess import call
from os import system
import os
import decimal
import numpy as np
from numpy import *
import support
import math
import argparse

parser = argparse.ArgumentParser(description='It is a script file, written in Python, used to submit jobs in a queue as well as analyze output data files which are generated by the jobs submitted earlier. Note: Module support.py consists of many functions and it is not permitted to modify without consulting the developer - Dr. Tapas Sahoo. User can easily modify module inputFile.py to generate lists of beads (see Getbeads function), step lengths for rotational and translational motions, and levels for Bisection move (see class GetStepAndLevel) as needed.')
parser.add_argument("-d", "--DipoleMoment", type=float, help="Dipole Moment of a bipolar molecule in Debye. It is a float.", default = 0.0)
parser.add_argument("-R", "--Rpt", type=float, help="Inter molecular spacing. It is a float.", default = 1.0)
parser.add_argument("variable", help="Name of a variable: either beta or tau. It must be a string.", choices =["tau","beta"])
parser.add_argument("Rotor", help="Name of rotor. It is needed to save rotational density matrix.")
parser.add_argument("param", type=float, help="Fixed value of beta or tau.")
parser.add_argument("-P","--bead", type=int, help="Number of beads.")
parser.add_argument("-l-max","--Lmax", type=int, help="lmax.")
parser.add_argument("-l-total-max","--LTmax", type=int, help="l-total-max.")
args = parser.parse_args()
#===============================================================================
#                                                                              |
#   Some parameters for submission of jobs and analysis outputs.               |
#   Change the parameters as you requied.                                      |
#                                                                              |
#===============================================================================
variableName        = args.variable
molecule_rot        = args.Rotor
#
Rpt                 = args.Rpt
dipolemoment        = args.DipoleMoment     

if (variableName == "tau"):
	beta            = args.param
	parameter       = beta
	variable        = parameter/(args.bead)

if (variableName == "beta"):
	tau             = args.param
	parameter       = tau
	variable        = parameter*(args.bead)

srcCodePath         = "/home/tapas/DipoleChain.jl-master/examples/"
Units               = support.GetUnitConverter()
BConstant           = support.GetBconst(molecule_rot)  # in wavenumber
BConstantK          = BConstant*Units.CMRECIP2KL
################################################################################
RFactorList         = support.GetrAndgFactor(molecule_rot, Rpt, dipolemoment)
RFactor             = RFactorList[0]
variable    		= variable*BConstantK
if not args.LTmax:
	commandRun    		= "julia "+srcCodePath+"pair_density.jl -R "+str(RFactor)+" --l-max "+str(args.Lmax)+" --tau "+str(variable)
else:
	commandRun    		= "julia "+srcCodePath+"pair_density.jl -R "+str(RFactor)+" --l-max "+str(args.Lmax)+" --l-total-max "+str(args.LTmax)+" --tau "+str(variable)
system(commandRun)
